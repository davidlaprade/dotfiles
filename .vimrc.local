" set relativenumber

" perform case insensitive search unless search contains capitol letter
set ignorecase " needed for smartcase
set smartcase

" exit insert mode with 'jk'
inoremap jk <Esc>

" emacs-like begining and end of line
inoremap <C-a> <c-o>^
inoremap <C-e> <c-o>g_
map <C-a> ^
map <C-e> g_

" delete to end of line
inoremap <C-k> <esc>DA

" delete to begining of line
inoremap <C-j> <esc>d0a

" undo and redo in insert mode
inoremap <C-u> <esc>ui
inoremap <C-r> <esc><C-r>i

" add empty lines
nmap <CR> o<esc>
nmap <Leader><CR> O<esc>

" view place in page history
map <Leader>j :jumps<cr>

" fix indentation in whole file
map <Leader>i mmgg=G`m

" fix Sierra OS issues with tmux/vim clipboard
" https://github.com/tmux/tmux/issues/543#issuecomment-248980734
set clipboard=unnamed

" copy to clipboard
map <Leader>c "*y

" paste from clipboard
map <Leader>v "*p

" easier window close
map <Leader>q <C-w>q

" enter explore mode
map <Leader>e :Explore<cr>

" Color scheme
colorscheme github
highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0
set term=screen-256color

" vim rspec configuration
let g:rspec_command = "Dispatch bundle exec rspec {spec}"
nnoremap <Leader>rt :call RunCurrentSpecFile()<CR>
nnoremap <Leader>rs :call RunNearestSpec()<CR>
nnoremap <Leader>rl :call RunLastSpec()<CR>
nnoremap <Leader>ra :call RunAllSpecs()<CR>

" smarter window resizing with CTRL-W-+/-
if bufwinnr(1)
  map + <C-w>+
  map - <C-w>-
endif
map <Leader>, <C-w>>
map <Leader>. <C-w><

" auto-resize all windows each time a new one is created
function! ResetPaneLayout()
    " Reset the window sizes
    wincmd =
endfunction
autocmd WinNew * call ResetPaneLayout()

" fuzzy file search using fzf with CTRL-P
map <C-p> :GFiles<cr>

"-------------------------------------------
"        BEGIN LSP configuration
"-------------------------------------------
" Make sure you:
"   npm install -g typescript typescript-language-server
"
" let g:ale_lint_delay = 1000
let g:ale_hover_to_preview = 1
" let g:ale_hover_cursor = 1
" When using Neovim or Vim with |popupwin|, if |g:ale_hover_to_floating_preview|
" or |g:ale_floating_preview| is set to 1, the hover information will show in a
nnoremap <C-]> :ALEGoToDefinition<CR>
nnoremap K :ALEHover<CR>
nnoremap F :ALEFix<CR>
nnoremap N :ALENext<CR>
nnoremap D :ALEDetail<CR>
let g:ale_fixers = ['prettier', 'eslint']
let g:ale_verbose = 1
let g:ale_keep_log = 1
"
"-------------------------------------------
"        END LSP configuration
"-------------------------------------------
