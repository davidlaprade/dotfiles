" set relativenumber

" perform case insensitive search unless search contains capitol letter
set ignorecase " needed for smartcase
set smartcase

" exit insert mode with 'jk'
inoremap jk <Esc>

" emacs-like begining and end of line
inoremap <C-a> <c-o>^
inoremap <C-e> <c-o>g_
map <C-a> ^
map <C-e> g_

" delete to end of line
inoremap <C-k> <esc>DA

" delete to begining of line
inoremap <C-j> <esc>d0a

" undo and redo in insert mode
inoremap <C-u> <esc>ui
inoremap <C-r> <esc><C-r>i

" add empty lines
nmap <CR> o<esc>
nmap <Leader><CR> O<esc>

" view place in page history
map <Leader>j :jumps<cr>

" fix indentation in whole file
map <Leader>i mmgg=G`m

" fix Sierra OS issues with tmux/vim clipboard
" https://github.com/tmux/tmux/issues/543#issuecomment-248980734
set clipboard=unnamed

" copy to clipboard
map <Leader>c "*y

" paste from clipboard
map <Leader>v "*p

" easier window close
map <Leader>q <C-w>q

" enter explore mode
map <Leader>e :Explore<cr>

" Color scheme
colorscheme github
highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0
set term=screen-256color

" vim rspec configuration
let g:rspec_command = "Dispatch bundle exec rspec {spec}"
nnoremap <Leader>rt :call RunCurrentSpecFile()<CR>
nnoremap <Leader>rs :call RunNearestSpec()<CR>
nnoremap <Leader>rl :call RunLastSpec()<CR>
nnoremap <Leader>ra :call RunAllSpecs()<CR>

" smarter window resizing with CTRL-W-+/-
if bufwinnr(1)
  map + <C-w>+
  map - <C-w>-
endif
map <Leader>, <C-w>>
map <Leader>. <C-w><

" auto-resize all windows each time a new one is created
function! ResetPaneLayout()
    " Reset the window sizes
    wincmd =
endfunction
autocmd WinNew * call ResetPaneLayout()


" fuzzy file search using fzf with CTRL-P
map <C-p> :FZF<cr>

"-------------------------------------------
"        BEGIN LSP configuration
"-------------------------------------------
" https://github.com/prabirshrestha/vim-lsp
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    " nmap <buffer> <leader>gd <plug>(lsp-definition)
    nmap <buffer> <C-]> <plug>(lsp-definition)
    " nmap <buffer> gs <plug>(lsp-document-symbol-search)
    " nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    " nmap <buffer> gr <plug>(lsp-references)
    " nmap <buffer> <leader>gi <plug>(lsp-implementation)
    nmap <buffer> <leader>gt <plug>(lsp-type-definition)
    " nmap <buffer> <leader>rn <plug>(lsp-rename)
    " nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    " nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    " nmap <buffer> K <plug>(lsp-hover)
    " nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    " nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" npm install -g typescript typescript-language-server
if executable('typescript-language-server')
  au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->['typescript-language-server', '--stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript', 'javascript', 'typescriptreact', 'javascriptreact'],
        \ })
endif

" https://github.com/natebosch/vim-lsc
" let g:lsc_auto_map = {
"     \ 'GoToDefinition': '<C-]>',
"     \ 'GoToDefinitionSplit': ['<C-W>]', '<C-W><C-]>'],
"     \ 'FindReferences': 'gr',
"     \ 'NextReference': '<C-n>',
"     \ 'PreviousReference': '<C-p>',
"     \ 'FindImplementations': 'gI',
"     \ 'FindCodeActions': 'ga',
"     \ 'Rename': 'gR',
"     \ 'ShowHover': v:true,
"     \ 'DocumentSymbol': 'go',
"     \ 'WorkspaceSymbol': 'gS',
"     \ 'SignatureHelp': 'gm',
"     \ 'Completion': 'completefunc',
"     \}

"-------------------------------------------
"        END LSP configuration
"-------------------------------------------
